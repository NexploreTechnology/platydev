{{- $fullname := include "hasura-backend-plus.fullname" . -}}
{{- $s3Connect := include "hasura-backend-plus.s3Connect" . -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullname }}
  labels:
    {{- include "hasura-backend-plus.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "hasura-backend-plus.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
      {{/*
        # checksum/minio-config: {{ include (print $.Template.BasePath "/minio-config.yaml") . | sha256sum }}
        # Missing: hasura secrets
        # TODO See https://v3.helm.sh/docs/howto/charts_tips_and_tricks/#automatically-roll-deployments
      */}}
        rollme: {{ randAlphaNum 5 | quote }}
    {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "hasura-backend-plus.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "hasura-backend-plus.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
      {{- if .Values.storage.rules }}
        - name: storage-rules
          configMap:
            name: "{{ $fullname }}"
            items:
              - key: storage.rules
                path: rules.yaml
      {{- end }}
      initContainers:
        - name: wait-hasura
          image: busybox
          command:
            - 'sh'
            - '-c'
            - |
              until wget 2>/dev/null -q --spider $HASURA_ENDPOINT/healthz
              do
                echo \"waiting for hasura\"
                sleep 1
              done
          env:
            - name: HASURA_ENDPOINT
            {{- if .Values.connect.hasura.enabled }}
              valueFrom:
                configMapKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.configMap "context" $) }}"
                  key: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.keys.endpoint "context" $) }}"
            {{- else }}
              {{- if .Values.hasura.enabled }}
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Release.Name }}-hasura"
                  key: endpoint
              {{- else }}
              valueFrom:
                configMapKeyRef:
                  name: "{{ $fullname }}"
                  key: hasura.endpoint
              {{- end }}
            {{- end }}
        {{- if .Values.connect.hasura.enabled }}
        - name: update-postgresql
          image: jbergknoff/postgresql-client
          args: ["$(DATABASE_URL)"]
          command:
            - "psql"
            - "-c"
            - |
              CREATE SCHEMA IF NOT EXISTS auth;
              CREATE SCHEMA IF NOT EXISTS storage; 
              ALTER DATABASE hasura SET search_path TO "$user",public,auth;
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.postgresql.secret "context" $) }}"
                  key: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.keys.databaseUrl "context" $) }}"
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
        {{- if .Values.image }}
          image: {{ .Values.image }}
        {{- else }}
          image: "{{ .Values.imageConfig.repository }}:{{ .Values.imageConfig.tag | default .Chart.AppVersion }}"
        {{- end }}
          imagePullPolicy: {{ .Values.imageConfig.pullPolicy }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          volumeMounts:
          {{- if .Values.storage.rules }}
            - name: storage-rules
              mountPath: /app/custom/storage-rules
          {{- end }}
          env:
            - name: ENDPOINT
            {{- if .Values.connect.hasura.enabled }}
              valueFrom:
                configMapKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.configMap "context" $) }}"
                  key: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.keys.endpoint "context" $) }}"
            {{- else }}
              {{- if .Values.hasura.enabled }}
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Release.Name }}-hasura"
                  key: endpoint
              {{- else }}
              valueFrom:
                configMapKeyRef:
                  name: "{{ $fullname }}"
                  key: hasura.endpoint
              {{- end }}
            {{- end }}
            - name: HASURA_ENDPOINT
              value: "$(ENDPOINT)/v1/graphql"
            - name: DATABASE_URL
            {{- if .Values.connect.hasura.enabled }}
              valueFrom:
                secretKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.postgresql.secret "context" $) }}"
                  key: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.keys.databaseUrl "context" $) }}"
            {{- else }}
              {{- if .Values.hasura.enabled }}
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-postgresql"
                  key: databaseUrl
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: "{{ $fullname }}"
                  key: postgresql.databaseUrl
              {{- end }}
            {{- end }}
            - name: HASURA_GRAPHQL_ADMIN_SECRET
            {{- if .Values.connect.hasura.enabled }}
              valueFrom:
                secretKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.secret "context" $) }}"
                  key: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.keys.adminSecret "context" $) }}"
            {{- else }}
              {{- if .Values.hasura.enabled }}
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-hasura"
                  key: adminSecret
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: "{{ $fullname }}"
                  key: adminSecret
              {{- end }}
            {{- end }}
            - name: JWT_KEY
            {{- if .Values.connect.hasura.enabled }}
              valueFrom:
                secretKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.secret "context" $) }}"
                  key: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.keys.jwt.key "context" $) }}"
            {{- else }}
              {{- if .Values.hasura.enabled }}
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-hasura"
                  key: jwt.key
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: "{{ $fullname }}"
                  key: jwt.key
              {{- end }}
            {{- end }}

            - name: JWT_ALGORITHM
            {{- if .Values.connect.hasura.enabled }}
              valueFrom:
                configMapKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.configMap "context" $) }}"
                  key: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.keys.jwt.algorithm "context" $) }}"
            {{- else }}
              {{- if .Values.hasura.enabled }}
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Release.Name }}-hasura"
                  key: jwt.algorithm
              {{- else }}
              valueFrom:
                configMapKeyRef:
                  name: "{{ $fullname }}"
                  key: jwt.algorithm
              {{- end }}
            {{- end }}

            - name: JWT_CLAIMS_NAMESPACE
            {{- if .Values.connect.hasura.enabled }}
              valueFrom:
                configMapKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.configMap "context" $) }}"
                  key: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.keys.jwt.claims.namespace "context" $) }}"
            {{- else }}
              {{- if .Values.hasura.enabled }}
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Release.Name }}-hasura"
                  key: jwt.claims.namespace
              {{- else }}
              valueFrom:
                configMapKeyRef:
                  name: "{{ $fullname }}"
                  key: jwt.claims.namespace
              {{- end }}
            {{- end }}
            - name: JWT_EXPIRES_IN
              valueFrom:
                configMapKeyRef:
                  name: "{{ $fullname }}"
                  key: jwt.expires.in
            - name: JWT_REFRESH_EXPIRES_IN
              valueFrom:
                configMapKeyRef:
                  name: "{{ $fullname }}"
                  key: jwt.expires.refresh
            - name: JWT_CUSTOM_FIELDS
              valueFrom:
                configMapKeyRef:
                  name: "{{ $fullname }}"
                  key: jwt.customFields
            {{- if .Values.serverUrl }}
            - name: SERVER_URL
              value: "{{- include "common.tplvalues.render" (dict "value" .Values.serverUrl "context" $) }}"            
            {{- else}}
            {{- if or .Values.ingress.enabled .Values.global.ingress.enabled }}
            - name: SERVER_URL
              value: "{{- include "hasura-backend-plus.serverUrl" . }}"            
            {{- end }}
            {{- end }}
            - name: AUTH_ENABLED
              value: "{{ .Values.auth.enabled }}"
            - name: AUTH_LOCAL_USERS_ENABLE
              value: "{{ .Values.auth.localUsers }}"
            - name: CHANGE_EMAIL_ENABLE
              value: "{{ .Values.auth.changeEmail }}"
            - name: NOTIFY_EMAIL_CHANGE
              value: "{{ .Values.auth.notifyEmailChange }}"
            - name: ANONYMOUS_USERS_ENABLED
              value: "{{ .Values.auth.anonymousUsers }}"
            - name: ALLOW_USER_SELF_DELETE
              value: "{{ .Values.auth.allowUserSelfDelete }}"
            - name: VERIFY_EMAILS
              value: "{{ .Values.auth.verifyEmails }}"
            - name: LOST_PASSWORD_ENABLE
              value: "{{ .Values.auth.lostPassword }}"
            - name: ALLOWED_EMAIL_DOMAINS
              value: "{{ join "," .Values.auth.registration.allowedEmailDomains }}"
            - name: DEFAULT_USER_ROLE
              value: "{{ .Values.auth.registration.defaultUserRole }}"
            - name: DEFAULT_ANONYMOUS_ROLE
              value: "{{ .Values.auth.registration.defaultAnonymousRole }}"
            - name: AUTO_ACTIVATE_NEW_USERS
              value: "{{ .Values.auth.registration.autoActivateNewUsers }}"
            - name: HIBP_ENABLE
              value: "{{ .Values.auth.registration.hibp }}"
            - name: REGISTRATION_CUSTOM_FIELDS
              value: "{{ join "," .Values.auth.registration.registrationCustomFields }}"
            - name: MIN_PASSWORD_LENGTH
              value: "{{ .Values.auth.registration.minPasswordLength }}"
            - name: DEFAULT_ALLOWED_USER_ROLES
            {{- $defaultAllowedRoles := ternary (join "," .Values.auth.registration.defaultAllowedRoles) (printf "%s,me" .Values.auth.registration.defaultUserRole) (default false .Values.auth.registration.defaultAllowedRoles) }}
              value: "{{ $defaultAllowedRoles }}"
            - name: ALLOWED_USER_ROLES
            {{- if .Values.auth.registration.allowedRoles }}
              value: "{{ join "," .Values.auth.registration.allowedRoles }}"
            {{- else }}
              value: "{{ $defaultAllowedRoles }}"
            {{- end }}
            - name: COOKIE_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ $fullname }}"
                  key: cookies.secret
            - name: COOKIE_SECURE
              value: "{{ .Values.auth.cookies.secure }}"
            - name: COOKIE_SAME_SITE
              value: "{{ .Values.auth.cookies.sameSite }}"
            - name: MFA_ENABLE
              value: "{{ .Values.auth.mfa.enabled }}"
            - name: OTP_ISSUER
              value: "{{ .Values.auth.mfa.issuer }}"
            - name: REDIRECT_URL_SUCCESS
              value: "{{ .Values.auth.providers.redirect.success }}"
            - name: REDIRECT_URL_ERROR
              value: "{{ .Values.auth.providers.redirect.error }}"
            {{- if .Values.auth.providers.github.enabled }}
            - name: GITHUB_ENABLE
              value: "true"
            - name: GITHUB_CLIENT_ID
              value: "{{ .Values.auth.providers.github.clientId }}"
            - name: GITHUB_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ $fullname }}"
                  key: github.client-secret
            - name: GITHUB_AUTHORIZATION_URL
              value: "{{ .Values.auth.providers.github.authenticationUrl }}"
            - name: GITHUB_TOKEN_URL
              value: "{{ .Values.auth.providers.github.tokenUrl }}"
            - name: GITHUB_USER_PROFILE_URL
              value: "{{ .Values.auth.providers.github.userProfileUrl }}"
            {{- end }}
            {{- if .Values.auth.providers.google.enabled }}
            - name: GOOGLE_ENABLE
              value: "true"
            - name: GOOGLE_CLIENT_ID
              value: "{{ .Values.auth.providers.google.clientId }}"
            - name: GOOGLE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ $fullname }}"
                  key: google.client-secret
            {{- end }}
            {{- if .Values.auth.providers.facebook.enabled }}
            - name: FACEBOOK_ENABLE
              value: "true"
            - name: FACEBOOK_CLIENT_ID
              value: "{{ .Values.auth.providers.facebook.clientId }}"
            - name: FACEBOOK_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ $fullname }}"
                  key: facebook.client-secret
            {{- end }}
            {{- if .Values.auth.providers.linkedin.enabled }}
            - name: LINKEDIN_ENABLE
              value: "true"
            - name: LINKEDIN_CLIENT_ID
              value: "{{ .Values.auth.providers.linkedin.clientId }}"
            - name: LINKEDIN_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ $fullname }}"
                  key: linkedin.client-secret
            {{- end }}
            {{- if .Values.auth.providers.windowsLive.enabled }}
            - name: WINDOWS_LIVE_ENABLE
              value: "true"
            - name: WINDOWS_LIVE_CLIENT_ID
              value: "{{ .Values.auth.providers.windowsLive.clientId }}"
            - name: WINDOWS_LIVE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ $fullname }}"
                  key: windows-live.client-secret
            {{- end }}
            {{- if .Values.auth.providers.twitter.enabled }}
            - name: TWITTER_ENABLE
              value: "{{ .Values.auth.providers.twitter.enabled }}"
            - name: TWITTER_CONSUMER_KEY
              value: "{{ .Values.auth.providers.twitter.consumerKey }}"
            - name: TWITTER_CONSUMER_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ $fullname }}"
                  key: twitter.consumer-secret
            {{- end }}
            {{- if .Values.auth.providers.apple.enabled }}
            - name: APPLE_ENABLE
              value: "{{ .Values.auth.providers.apple.enabled }}"
            - name: APPLE_CLIENT_ID
              value: "{{ .Values.auth.providers.apple.clientId }}"
            - name: APPLE_TEAM_ID
              value: "{{ .Values.auth.providers.apple.teamId }}"
            - name: APPLE_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: "{{ $fullname }}"
                  key: apple.key-id
            - name: APPLE_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ $fullname }}"
                  key: apple.private-key
            {{- end }}
            - name: STORAGE_ENABLE
              value: "{{ .Values.storage.enabled }}"
            {{- if .Values.storage.enabled }}
            - name: S3_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: "{{ $fullname }}"
                  key: s3.endpoint
            - name: S3_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: "{{ $fullname }}"
                  key: s3.bucket
            - name: S3_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: "{{ $s3Connect }}"
                {{- if .Values.minio.enabled }}
                  key: access-key
                {{- else }}
                  key: s3.access-key
                {{- end }}
            - name: S3_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ $s3Connect }}"
                {{- if .Values.minio.enabled }}
                  key: secret-key
                {{- else }}
                  key: s3.secret-key
                {{- end }}
            - name: S3_SSL_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: "{{ $fullname }}"
                  key: s3.ssl     
            {{- end }}       
            {{- if .Values.emails.enabled }}
            - name: EMAILS_ENABLE
              value: "true"
            - name: SMTP_HOST
              valueFrom:
                configMapKeyRef:
                  name: "{{ $fullname }}"
                  key: emails.smtp.host
            - name: SMTP_SECURE
              valueFrom:
                configMapKeyRef:
                  name: "{{ $fullname }}"
                  key: emails.smtp.secure
            - name: SMTP_PORT
              valueFrom:
                configMapKeyRef:
                  name: "{{ $fullname }}"
                  key: emails.smtp.port
            - name: SMTP_USER
              valueFrom:
                configMapKeyRef:
                  name: "{{ $fullname }}"
                  key: emails.smtp.user
            - name: SMTP_SENDER
              valueFrom:
                configMapKeyRef:
                  name: "{{ $fullname }}"
                  key: emails.smtp.sender
            - name: SMTP_AUTH_METHOD
              valueFrom:
                configMapKeyRef:
                  name: "{{ $fullname }}"
                  key: emails.smtp.auth-method
            - name: SMTP_PASS
              valueFrom:
                secretKeyRef:
                  name: "{{ $fullname }}"
                  key: emails.smtp.password        
            {{- end }}       
            - name: MAX_REQUESTS
              valueFrom:
                configMapKeyRef:
                  name: "{{ $fullname }}"
                  key: limiter.max-requests
            - name: TIME_FRAME
              valueFrom:
                configMapKeyRef:
                  name: "{{ $fullname }}"
                  key: limiter.time-frame
            {{- if .Values.extraEnv }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraEnv "context" $) | nindent 12 }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
